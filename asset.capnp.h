// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: asset.capnp

#ifndef CAPNP_INCLUDED_b6ac9e37128f3f5f_
#define CAPNP_INCLUDED_b6ac9e37128f3f5f_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 4000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif



struct MipMapLevel {
  MipMapLevel() = delete;

  class Reader;
  class Builder;
  class Pipeline;
};

struct AssetPixelDataCooked {
  AssetPixelDataCooked() = delete;

  class Reader;
  class Builder;
  class Pipeline;
};

struct AssetPixelDataStored {
  AssetPixelDataStored() = delete;

  class Reader;
  class Builder;
  class Pipeline;
};

struct AssetPixelData {
  AssetPixelData() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    STORED,
    COOKED,
  };
};

struct AssetPcmData {
  AssetPcmData() = delete;

  class Reader;
  class Builder;
  class Pipeline;
};

struct AssetMaterialDesc {
  AssetMaterialDesc() = delete;

  class Reader;
  class Builder;
  class Pipeline;
};

struct Asset {
  Asset() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    PIXEL_DATA,
    PCM_DATA,
    MATERIAL_DESC,
  };
};

struct AssetBundle {
  AssetBundle() = delete;

  class Reader;
  class Builder;
  class Pipeline;
};

struct GUID {
  GUID() = delete;

  class Reader;
  class Builder;
  class Pipeline;
};

struct GUIDHashTable {
  GUIDHashTable() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Entry;
};

struct GUIDHashTable::Entry {
  Entry() = delete;

  class Reader;
  class Builder;
  class Pipeline;
};


// =======================================================================================

namespace capnp {
namespace schemas {

extern const ::capnp::_::RawSchema s_caca3b87c40c5377;
extern const ::capnp::_::RawSchema s_deb23d88c13a04f5;
extern const ::capnp::_::RawSchema s_c4c804e6117f5be8;
extern const ::capnp::_::RawSchema s_c3748245afd3f687;
extern const ::capnp::_::RawSchema s_88ea1a2fd71158b8;
extern const ::capnp::_::RawSchema s_b721dd888a255fb8;
extern const ::capnp::_::RawSchema s_ca74901cf6977da9;
extern const ::capnp::_::RawSchema s_fb040be03edab697;
extern const ::capnp::_::RawSchema s_d14b172834c0bb6f;
extern const ::capnp::_::RawSchema s_8098784308563cd8;
extern const ::capnp::_::RawSchema s_b8b53bf4d289c65b;

}  // namespace schemas
namespace _ {  // private

CAPNP_DECLARE_STRUCT(
    ::MipMapLevel, caca3b87c40c5377,
    1, 0, EIGHT_BYTES);
CAPNP_DECLARE_STRUCT(
    ::AssetPixelDataCooked, deb23d88c13a04f5,
    1, 2, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::AssetPixelDataStored, c4c804e6117f5be8,
    0, 3, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::AssetPixelData, c3748245afd3f687,
    1, 1, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::AssetPcmData, 88ea1a2fd71158b8,
    0, 0, VOID);
CAPNP_DECLARE_STRUCT(
    ::AssetMaterialDesc, b721dd888a255fb8,
    0, 0, VOID);
CAPNP_DECLARE_STRUCT(
    ::Asset, ca74901cf6977da9,
    1, 3, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::AssetBundle, fb040be03edab697,
    0, 2, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::GUID, d14b172834c0bb6f,
    2, 0, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::GUIDHashTable, 8098784308563cd8,
    0, 1, POINTER);
CAPNP_DECLARE_STRUCT(
    ::GUIDHashTable::Entry, b8b53bf4d289c65b,
    2, 1, INLINE_COMPOSITE);

}  // namespace _ (private)
}  // namespace capnp

// =======================================================================================


class MipMapLevel::Reader {
public:
  typedef MipMapLevel Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

  inline  ::uint32_t getWidth() const;

  inline  ::uint32_t getHeight() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(MipMapLevel::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(MipMapLevel::Reader reader) {
  return ::capnp::_::structString<MipMapLevel>(reader._reader);
}

class MipMapLevel::Builder {
public:
  typedef MipMapLevel Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }

  inline  ::uint32_t getWidth();
  inline void setWidth( ::uint32_t value);

  inline  ::uint32_t getHeight();
  inline void setHeight( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(MipMapLevel::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(MipMapLevel::Builder builder) {
  return ::capnp::_::structString<MipMapLevel>(builder._builder.asReader());
}

class MipMapLevel::Pipeline {
public:
  typedef MipMapLevel Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
};

class AssetPixelDataCooked::Reader {
public:
  typedef AssetPixelDataCooked Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

  inline  ::uint32_t getPixelFormat() const;

  inline bool hasLevels() const;
  inline  ::capnp::List< ::MipMapLevel>::Reader getLevels() const;

  inline bool hasLevelData() const;
  inline  ::capnp::List< ::capnp::Data>::Reader getLevelData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(AssetPixelDataCooked::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(AssetPixelDataCooked::Reader reader) {
  return ::capnp::_::structString<AssetPixelDataCooked>(reader._reader);
}

class AssetPixelDataCooked::Builder {
public:
  typedef AssetPixelDataCooked Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }

  inline  ::uint32_t getPixelFormat();
  inline void setPixelFormat( ::uint32_t value);

  inline bool hasLevels();
  inline  ::capnp::List< ::MipMapLevel>::Builder getLevels();
  inline void setLevels( ::capnp::List< ::MipMapLevel>::Reader value);
  inline  ::capnp::List< ::MipMapLevel>::Builder initLevels(unsigned int size);
  inline void adoptLevels(::capnp::Orphan< ::capnp::List< ::MipMapLevel>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::MipMapLevel>> disownLevels();

  inline bool hasLevelData();
  inline  ::capnp::List< ::capnp::Data>::Builder getLevelData();
  inline void setLevelData( ::capnp::List< ::capnp::Data>::Reader value);
  inline void setLevelData(::kj::ArrayPtr<const  ::capnp::Data::Reader> value);
  inline  ::capnp::List< ::capnp::Data>::Builder initLevelData(unsigned int size);
  inline void adoptLevelData(::capnp::Orphan< ::capnp::List< ::capnp::Data>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Data>> disownLevelData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(AssetPixelDataCooked::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(AssetPixelDataCooked::Builder builder) {
  return ::capnp::_::structString<AssetPixelDataCooked>(builder._builder.asReader());
}

class AssetPixelDataCooked::Pipeline {
public:
  typedef AssetPixelDataCooked Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
};

class AssetPixelDataStored::Reader {
public:
  typedef AssetPixelDataStored Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

  inline bool hasSrcFilename() const;
  inline  ::capnp::Text::Reader getSrcFilename() const;

  inline bool hasMimeType() const;
  inline  ::capnp::Text::Reader getMimeType() const;

  inline bool hasData() const;
  inline  ::capnp::Data::Reader getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(AssetPixelDataStored::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(AssetPixelDataStored::Reader reader) {
  return ::capnp::_::structString<AssetPixelDataStored>(reader._reader);
}

class AssetPixelDataStored::Builder {
public:
  typedef AssetPixelDataStored Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }

  inline bool hasSrcFilename();
  inline  ::capnp::Text::Builder getSrcFilename();
  inline void setSrcFilename( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSrcFilename(unsigned int size);
  inline void adoptSrcFilename(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSrcFilename();

  inline bool hasMimeType();
  inline  ::capnp::Text::Builder getMimeType();
  inline void setMimeType( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMimeType(unsigned int size);
  inline void adoptMimeType(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMimeType();

  inline bool hasData();
  inline  ::capnp::Data::Builder getData();
  inline void setData( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(AssetPixelDataStored::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(AssetPixelDataStored::Builder builder) {
  return ::capnp::_::structString<AssetPixelDataStored>(builder._builder.asReader());
}

class AssetPixelDataStored::Pipeline {
public:
  typedef AssetPixelDataStored Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
};

class AssetPixelData::Reader {
public:
  typedef AssetPixelData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

  inline Which which() const;
  inline bool isStored() const;
  inline bool hasStored() const;
  inline  ::AssetPixelDataStored::Reader getStored() const;

  inline bool isCooked() const;
  inline bool hasCooked() const;
  inline  ::AssetPixelDataCooked::Reader getCooked() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(AssetPixelData::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(AssetPixelData::Reader reader) {
  return ::capnp::_::structString<AssetPixelData>(reader._reader);
}

class AssetPixelData::Builder {
public:
  typedef AssetPixelData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }

  inline Which which();
  inline bool isStored();
  inline bool hasStored();
  inline  ::AssetPixelDataStored::Builder getStored();
  inline void setStored( ::AssetPixelDataStored::Reader value);
  inline  ::AssetPixelDataStored::Builder initStored();
  inline void adoptStored(::capnp::Orphan< ::AssetPixelDataStored>&& value);
  inline ::capnp::Orphan< ::AssetPixelDataStored> disownStored();

  inline bool isCooked();
  inline bool hasCooked();
  inline  ::AssetPixelDataCooked::Builder getCooked();
  inline void setCooked( ::AssetPixelDataCooked::Reader value);
  inline  ::AssetPixelDataCooked::Builder initCooked();
  inline void adoptCooked(::capnp::Orphan< ::AssetPixelDataCooked>&& value);
  inline ::capnp::Orphan< ::AssetPixelDataCooked> disownCooked();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(AssetPixelData::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(AssetPixelData::Builder builder) {
  return ::capnp::_::structString<AssetPixelData>(builder._builder.asReader());
}

class AssetPixelData::Pipeline {
public:
  typedef AssetPixelData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
};

class AssetPcmData::Reader {
public:
  typedef AssetPcmData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(AssetPcmData::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(AssetPcmData::Reader reader) {
  return ::capnp::_::structString<AssetPcmData>(reader._reader);
}

class AssetPcmData::Builder {
public:
  typedef AssetPcmData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(AssetPcmData::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(AssetPcmData::Builder builder) {
  return ::capnp::_::structString<AssetPcmData>(builder._builder.asReader());
}

class AssetPcmData::Pipeline {
public:
  typedef AssetPcmData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
};

class AssetMaterialDesc::Reader {
public:
  typedef AssetMaterialDesc Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(AssetMaterialDesc::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(AssetMaterialDesc::Reader reader) {
  return ::capnp::_::structString<AssetMaterialDesc>(reader._reader);
}

class AssetMaterialDesc::Builder {
public:
  typedef AssetMaterialDesc Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(AssetMaterialDesc::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(AssetMaterialDesc::Builder builder) {
  return ::capnp::_::structString<AssetMaterialDesc>(builder._builder.asReader());
}

class AssetMaterialDesc::Pipeline {
public:
  typedef AssetMaterialDesc Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
};

class Asset::Reader {
public:
  typedef Asset Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

  inline Which which() const;
  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool hasGuid() const;
  inline  ::capnp::Text::Reader getGuid() const;

  inline bool isPixelData() const;
  inline bool hasPixelData() const;
  inline  ::AssetPixelData::Reader getPixelData() const;

  inline bool isPcmData() const;
  inline bool hasPcmData() const;
  inline  ::AssetPcmData::Reader getPcmData() const;

  inline bool isMaterialDesc() const;
  inline bool hasMaterialDesc() const;
  inline  ::AssetMaterialDesc::Reader getMaterialDesc() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Asset::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(Asset::Reader reader) {
  return ::capnp::_::structString<Asset>(reader._reader);
}

class Asset::Builder {
public:
  typedef Asset Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }

  inline Which which();
  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool hasGuid();
  inline  ::capnp::Text::Builder getGuid();
  inline void setGuid( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGuid(unsigned int size);
  inline void adoptGuid(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGuid();

  inline bool isPixelData();
  inline bool hasPixelData();
  inline  ::AssetPixelData::Builder getPixelData();
  inline void setPixelData( ::AssetPixelData::Reader value);
  inline  ::AssetPixelData::Builder initPixelData();
  inline void adoptPixelData(::capnp::Orphan< ::AssetPixelData>&& value);
  inline ::capnp::Orphan< ::AssetPixelData> disownPixelData();

  inline bool isPcmData();
  inline bool hasPcmData();
  inline  ::AssetPcmData::Builder getPcmData();
  inline void setPcmData( ::AssetPcmData::Reader value);
  inline  ::AssetPcmData::Builder initPcmData();
  inline void adoptPcmData(::capnp::Orphan< ::AssetPcmData>&& value);
  inline ::capnp::Orphan< ::AssetPcmData> disownPcmData();

  inline bool isMaterialDesc();
  inline bool hasMaterialDesc();
  inline  ::AssetMaterialDesc::Builder getMaterialDesc();
  inline void setMaterialDesc( ::AssetMaterialDesc::Reader value);
  inline  ::AssetMaterialDesc::Builder initMaterialDesc();
  inline void adoptMaterialDesc(::capnp::Orphan< ::AssetMaterialDesc>&& value);
  inline ::capnp::Orphan< ::AssetMaterialDesc> disownMaterialDesc();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Asset::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(Asset::Builder builder) {
  return ::capnp::_::structString<Asset>(builder._builder.asReader());
}

class Asset::Pipeline {
public:
  typedef Asset Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
};

class AssetBundle::Reader {
public:
  typedef AssetBundle Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

  inline bool hasName() const;
  inline  ::capnp::List< ::capnp::Text>::Reader getName() const;

  inline bool hasAssets() const;
  inline  ::capnp::List< ::Asset>::Reader getAssets() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(AssetBundle::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(AssetBundle::Reader reader) {
  return ::capnp::_::structString<AssetBundle>(reader._reader);
}

class AssetBundle::Builder {
public:
  typedef AssetBundle Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }

  inline bool hasName();
  inline  ::capnp::List< ::capnp::Text>::Builder getName();
  inline void setName( ::capnp::List< ::capnp::Text>::Reader value);
  inline void setName(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text>::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> disownName();

  inline bool hasAssets();
  inline  ::capnp::List< ::Asset>::Builder getAssets();
  inline void setAssets( ::capnp::List< ::Asset>::Reader value);
  inline  ::capnp::List< ::Asset>::Builder initAssets(unsigned int size);
  inline void adoptAssets(::capnp::Orphan< ::capnp::List< ::Asset>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Asset>> disownAssets();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(AssetBundle::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(AssetBundle::Builder builder) {
  return ::capnp::_::structString<AssetBundle>(builder._builder.asReader());
}

class AssetBundle::Pipeline {
public:
  typedef AssetBundle Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
};

class GUID::Reader {
public:
  typedef GUID Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

  inline  ::uint32_t getV0() const;

  inline  ::uint32_t getV4() const;

  inline  ::uint32_t getV8() const;

  inline  ::uint32_t getV12() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(GUID::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(GUID::Reader reader) {
  return ::capnp::_::structString<GUID>(reader._reader);
}

class GUID::Builder {
public:
  typedef GUID Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }

  inline  ::uint32_t getV0();
  inline void setV0( ::uint32_t value);

  inline  ::uint32_t getV4();
  inline void setV4( ::uint32_t value);

  inline  ::uint32_t getV8();
  inline void setV8( ::uint32_t value);

  inline  ::uint32_t getV12();
  inline void setV12( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(GUID::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(GUID::Builder builder) {
  return ::capnp::_::structString<GUID>(builder._builder.asReader());
}

class GUID::Pipeline {
public:
  typedef GUID Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
};

class GUIDHashTable::Reader {
public:
  typedef GUIDHashTable Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

  inline bool hasDir() const;
  inline  ::capnp::List< ::GUIDHashTable::Entry>::Reader getDir() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(GUIDHashTable::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(GUIDHashTable::Reader reader) {
  return ::capnp::_::structString<GUIDHashTable>(reader._reader);
}

class GUIDHashTable::Builder {
public:
  typedef GUIDHashTable Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }

  inline bool hasDir();
  inline  ::capnp::List< ::GUIDHashTable::Entry>::Builder getDir();
  inline void setDir( ::capnp::List< ::GUIDHashTable::Entry>::Reader value);
  inline  ::capnp::List< ::GUIDHashTable::Entry>::Builder initDir(unsigned int size);
  inline void adoptDir(::capnp::Orphan< ::capnp::List< ::GUIDHashTable::Entry>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::GUIDHashTable::Entry>> disownDir();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(GUIDHashTable::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(GUIDHashTable::Builder builder) {
  return ::capnp::_::structString<GUIDHashTable>(builder._builder.asReader());
}

class GUIDHashTable::Pipeline {
public:
  typedef GUIDHashTable Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
};

class GUIDHashTable::Entry::Reader {
public:
  typedef Entry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

  inline bool hasKey() const;
  inline  ::GUID::Reader getKey() const;

  inline  ::uint64_t getSize() const;

  inline  ::uint64_t getOffset() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(GUIDHashTable::Entry::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(GUIDHashTable::Entry::Reader reader) {
  return ::capnp::_::structString<GUIDHashTable::Entry>(reader._reader);
}

class GUIDHashTable::Entry::Builder {
public:
  typedef Entry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }

  inline bool hasKey();
  inline  ::GUID::Builder getKey();
  inline void setKey( ::GUID::Reader value);
  inline  ::GUID::Builder initKey();
  inline void adoptKey(::capnp::Orphan< ::GUID>&& value);
  inline ::capnp::Orphan< ::GUID> disownKey();

  inline  ::uint64_t getSize();
  inline void setSize( ::uint64_t value);

  inline  ::uint64_t getOffset();
  inline void setOffset( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(GUIDHashTable::Entry::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(GUIDHashTable::Entry::Builder builder) {
  return ::capnp::_::structString<GUIDHashTable::Entry>(builder._builder.asReader());
}

class GUIDHashTable::Entry::Pipeline {
public:
  typedef Entry Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::GUID::Pipeline getKey();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
};

// =======================================================================================

inline  ::uint32_t MipMapLevel::Reader::getWidth() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t MipMapLevel::Builder::getWidth() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void MipMapLevel::Builder::setWidth( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t MipMapLevel::Reader::getHeight() const {
  return _reader.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint32_t MipMapLevel::Builder::getHeight() {
  return _builder.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void MipMapLevel::Builder::setHeight( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AssetPixelDataCooked::Reader::getPixelFormat() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t AssetPixelDataCooked::Builder::getPixelFormat() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void AssetPixelDataCooked::Builder::setPixelFormat( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool AssetPixelDataCooked::Reader::hasLevels() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool AssetPixelDataCooked::Builder::hasLevels() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::MipMapLevel>::Reader AssetPixelDataCooked::Reader::getLevels() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::MipMapLevel>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::MipMapLevel>::Builder AssetPixelDataCooked::Builder::getLevels() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::MipMapLevel>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void AssetPixelDataCooked::Builder::setLevels( ::capnp::List< ::MipMapLevel>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::MipMapLevel>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::MipMapLevel>::Builder AssetPixelDataCooked::Builder::initLevels(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::MipMapLevel>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void AssetPixelDataCooked::Builder::adoptLevels(
    ::capnp::Orphan< ::capnp::List< ::MipMapLevel>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::MipMapLevel>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::MipMapLevel>> AssetPixelDataCooked::Builder::disownLevels() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::MipMapLevel>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool AssetPixelDataCooked::Reader::hasLevelData() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool AssetPixelDataCooked::Builder::hasLevelData() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Data>::Reader AssetPixelDataCooked::Reader::getLevelData() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Data>::Builder AssetPixelDataCooked::Builder::getLevelData() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void AssetPixelDataCooked::Builder::setLevelData( ::capnp::List< ::capnp::Data>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline void AssetPixelDataCooked::Builder::setLevelData(::kj::ArrayPtr<const  ::capnp::Data::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Data>::Builder AssetPixelDataCooked::Builder::initLevelData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void AssetPixelDataCooked::Builder::adoptLevelData(
    ::capnp::Orphan< ::capnp::List< ::capnp::Data>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Data>> AssetPixelDataCooked::Builder::disownLevelData() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool AssetPixelDataStored::Reader::hasSrcFilename() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool AssetPixelDataStored::Builder::hasSrcFilename() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader AssetPixelDataStored::Reader::getSrcFilename() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder AssetPixelDataStored::Builder::getSrcFilename() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void AssetPixelDataStored::Builder::setSrcFilename( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder AssetPixelDataStored::Builder::initSrcFilename(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void AssetPixelDataStored::Builder::adoptSrcFilename(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> AssetPixelDataStored::Builder::disownSrcFilename() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool AssetPixelDataStored::Reader::hasMimeType() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool AssetPixelDataStored::Builder::hasMimeType() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader AssetPixelDataStored::Reader::getMimeType() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder AssetPixelDataStored::Builder::getMimeType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void AssetPixelDataStored::Builder::setMimeType( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder AssetPixelDataStored::Builder::initMimeType(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void AssetPixelDataStored::Builder::adoptMimeType(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> AssetPixelDataStored::Builder::disownMimeType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool AssetPixelDataStored::Reader::hasData() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool AssetPixelDataStored::Builder::hasData() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader AssetPixelDataStored::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder AssetPixelDataStored::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void AssetPixelDataStored::Builder::setData( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder AssetPixelDataStored::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void AssetPixelDataStored::Builder::adoptData(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> AssetPixelDataStored::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline AssetPixelData::Which AssetPixelData::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline AssetPixelData::Which AssetPixelData::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool AssetPixelData::Reader::isStored() const {
  return which() == AssetPixelData::STORED;
}
inline bool AssetPixelData::Builder::isStored() {
  return which() == AssetPixelData::STORED;
}
inline bool AssetPixelData::Reader::hasStored() const {
  if (which() != AssetPixelData::STORED) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool AssetPixelData::Builder::hasStored() {
  if (which() != AssetPixelData::STORED) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::AssetPixelDataStored::Reader AssetPixelData::Reader::getStored() const {
  KJ_IREQUIRE(which() == AssetPixelData::STORED,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::AssetPixelDataStored>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::AssetPixelDataStored::Builder AssetPixelData::Builder::getStored() {
  KJ_IREQUIRE(which() == AssetPixelData::STORED,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::AssetPixelDataStored>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void AssetPixelData::Builder::setStored( ::AssetPixelDataStored::Reader value) {
  _builder.setDataField<AssetPixelData::Which>(
      0 * ::capnp::ELEMENTS, AssetPixelData::STORED);
  ::capnp::_::PointerHelpers< ::AssetPixelDataStored>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::AssetPixelDataStored::Builder AssetPixelData::Builder::initStored() {
  _builder.setDataField<AssetPixelData::Which>(
      0 * ::capnp::ELEMENTS, AssetPixelData::STORED);
  return ::capnp::_::PointerHelpers< ::AssetPixelDataStored>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void AssetPixelData::Builder::adoptStored(
    ::capnp::Orphan< ::AssetPixelDataStored>&& value) {
  _builder.setDataField<AssetPixelData::Which>(
      0 * ::capnp::ELEMENTS, AssetPixelData::STORED);
  ::capnp::_::PointerHelpers< ::AssetPixelDataStored>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::AssetPixelDataStored> AssetPixelData::Builder::disownStored() {
  KJ_IREQUIRE(which() == AssetPixelData::STORED,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::AssetPixelDataStored>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool AssetPixelData::Reader::isCooked() const {
  return which() == AssetPixelData::COOKED;
}
inline bool AssetPixelData::Builder::isCooked() {
  return which() == AssetPixelData::COOKED;
}
inline bool AssetPixelData::Reader::hasCooked() const {
  if (which() != AssetPixelData::COOKED) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool AssetPixelData::Builder::hasCooked() {
  if (which() != AssetPixelData::COOKED) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::AssetPixelDataCooked::Reader AssetPixelData::Reader::getCooked() const {
  KJ_IREQUIRE(which() == AssetPixelData::COOKED,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::AssetPixelDataCooked>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::AssetPixelDataCooked::Builder AssetPixelData::Builder::getCooked() {
  KJ_IREQUIRE(which() == AssetPixelData::COOKED,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::AssetPixelDataCooked>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void AssetPixelData::Builder::setCooked( ::AssetPixelDataCooked::Reader value) {
  _builder.setDataField<AssetPixelData::Which>(
      0 * ::capnp::ELEMENTS, AssetPixelData::COOKED);
  ::capnp::_::PointerHelpers< ::AssetPixelDataCooked>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::AssetPixelDataCooked::Builder AssetPixelData::Builder::initCooked() {
  _builder.setDataField<AssetPixelData::Which>(
      0 * ::capnp::ELEMENTS, AssetPixelData::COOKED);
  return ::capnp::_::PointerHelpers< ::AssetPixelDataCooked>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void AssetPixelData::Builder::adoptCooked(
    ::capnp::Orphan< ::AssetPixelDataCooked>&& value) {
  _builder.setDataField<AssetPixelData::Which>(
      0 * ::capnp::ELEMENTS, AssetPixelData::COOKED);
  ::capnp::_::PointerHelpers< ::AssetPixelDataCooked>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::AssetPixelDataCooked> AssetPixelData::Builder::disownCooked() {
  KJ_IREQUIRE(which() == AssetPixelData::COOKED,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::AssetPixelDataCooked>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline Asset::Which Asset::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline Asset::Which Asset::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool Asset::Reader::hasName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Asset::Builder::hasName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Asset::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Asset::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Asset::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Asset::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Asset::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Asset::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Asset::Reader::hasGuid() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Asset::Builder::hasGuid() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Asset::Reader::getGuid() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Asset::Builder::getGuid() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Asset::Builder::setGuid( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Asset::Builder::initGuid(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Asset::Builder::adoptGuid(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Asset::Builder::disownGuid() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Asset::Reader::isPixelData() const {
  return which() == Asset::PIXEL_DATA;
}
inline bool Asset::Builder::isPixelData() {
  return which() == Asset::PIXEL_DATA;
}
inline bool Asset::Reader::hasPixelData() const {
  if (which() != Asset::PIXEL_DATA) return false;
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Asset::Builder::hasPixelData() {
  if (which() != Asset::PIXEL_DATA) return false;
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::AssetPixelData::Reader Asset::Reader::getPixelData() const {
  KJ_IREQUIRE(which() == Asset::PIXEL_DATA,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::AssetPixelData>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::AssetPixelData::Builder Asset::Builder::getPixelData() {
  KJ_IREQUIRE(which() == Asset::PIXEL_DATA,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::AssetPixelData>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Asset::Builder::setPixelData( ::AssetPixelData::Reader value) {
  _builder.setDataField<Asset::Which>(
      0 * ::capnp::ELEMENTS, Asset::PIXEL_DATA);
  ::capnp::_::PointerHelpers< ::AssetPixelData>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::AssetPixelData::Builder Asset::Builder::initPixelData() {
  _builder.setDataField<Asset::Which>(
      0 * ::capnp::ELEMENTS, Asset::PIXEL_DATA);
  return ::capnp::_::PointerHelpers< ::AssetPixelData>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Asset::Builder::adoptPixelData(
    ::capnp::Orphan< ::AssetPixelData>&& value) {
  _builder.setDataField<Asset::Which>(
      0 * ::capnp::ELEMENTS, Asset::PIXEL_DATA);
  ::capnp::_::PointerHelpers< ::AssetPixelData>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::AssetPixelData> Asset::Builder::disownPixelData() {
  KJ_IREQUIRE(which() == Asset::PIXEL_DATA,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::AssetPixelData>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Asset::Reader::isPcmData() const {
  return which() == Asset::PCM_DATA;
}
inline bool Asset::Builder::isPcmData() {
  return which() == Asset::PCM_DATA;
}
inline bool Asset::Reader::hasPcmData() const {
  if (which() != Asset::PCM_DATA) return false;
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Asset::Builder::hasPcmData() {
  if (which() != Asset::PCM_DATA) return false;
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::AssetPcmData::Reader Asset::Reader::getPcmData() const {
  KJ_IREQUIRE(which() == Asset::PCM_DATA,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::AssetPcmData>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::AssetPcmData::Builder Asset::Builder::getPcmData() {
  KJ_IREQUIRE(which() == Asset::PCM_DATA,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::AssetPcmData>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Asset::Builder::setPcmData( ::AssetPcmData::Reader value) {
  _builder.setDataField<Asset::Which>(
      0 * ::capnp::ELEMENTS, Asset::PCM_DATA);
  ::capnp::_::PointerHelpers< ::AssetPcmData>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::AssetPcmData::Builder Asset::Builder::initPcmData() {
  _builder.setDataField<Asset::Which>(
      0 * ::capnp::ELEMENTS, Asset::PCM_DATA);
  return ::capnp::_::PointerHelpers< ::AssetPcmData>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Asset::Builder::adoptPcmData(
    ::capnp::Orphan< ::AssetPcmData>&& value) {
  _builder.setDataField<Asset::Which>(
      0 * ::capnp::ELEMENTS, Asset::PCM_DATA);
  ::capnp::_::PointerHelpers< ::AssetPcmData>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::AssetPcmData> Asset::Builder::disownPcmData() {
  KJ_IREQUIRE(which() == Asset::PCM_DATA,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::AssetPcmData>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Asset::Reader::isMaterialDesc() const {
  return which() == Asset::MATERIAL_DESC;
}
inline bool Asset::Builder::isMaterialDesc() {
  return which() == Asset::MATERIAL_DESC;
}
inline bool Asset::Reader::hasMaterialDesc() const {
  if (which() != Asset::MATERIAL_DESC) return false;
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Asset::Builder::hasMaterialDesc() {
  if (which() != Asset::MATERIAL_DESC) return false;
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::AssetMaterialDesc::Reader Asset::Reader::getMaterialDesc() const {
  KJ_IREQUIRE(which() == Asset::MATERIAL_DESC,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::AssetMaterialDesc>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::AssetMaterialDesc::Builder Asset::Builder::getMaterialDesc() {
  KJ_IREQUIRE(which() == Asset::MATERIAL_DESC,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::AssetMaterialDesc>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Asset::Builder::setMaterialDesc( ::AssetMaterialDesc::Reader value) {
  _builder.setDataField<Asset::Which>(
      0 * ::capnp::ELEMENTS, Asset::MATERIAL_DESC);
  ::capnp::_::PointerHelpers< ::AssetMaterialDesc>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::AssetMaterialDesc::Builder Asset::Builder::initMaterialDesc() {
  _builder.setDataField<Asset::Which>(
      0 * ::capnp::ELEMENTS, Asset::MATERIAL_DESC);
  return ::capnp::_::PointerHelpers< ::AssetMaterialDesc>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Asset::Builder::adoptMaterialDesc(
    ::capnp::Orphan< ::AssetMaterialDesc>&& value) {
  _builder.setDataField<Asset::Which>(
      0 * ::capnp::ELEMENTS, Asset::MATERIAL_DESC);
  ::capnp::_::PointerHelpers< ::AssetMaterialDesc>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::AssetMaterialDesc> Asset::Builder::disownMaterialDesc() {
  KJ_IREQUIRE(which() == Asset::MATERIAL_DESC,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::AssetMaterialDesc>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool AssetBundle::Reader::hasName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool AssetBundle::Builder::hasName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text>::Reader AssetBundle::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text>::Builder AssetBundle::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void AssetBundle::Builder::setName( ::capnp::List< ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void AssetBundle::Builder::setName(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text>::Builder AssetBundle::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void AssetBundle::Builder::adoptName(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> AssetBundle::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool AssetBundle::Reader::hasAssets() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool AssetBundle::Builder::hasAssets() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Asset>::Reader AssetBundle::Reader::getAssets() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Asset>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Asset>::Builder AssetBundle::Builder::getAssets() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Asset>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void AssetBundle::Builder::setAssets( ::capnp::List< ::Asset>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Asset>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Asset>::Builder AssetBundle::Builder::initAssets(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Asset>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void AssetBundle::Builder::adoptAssets(
    ::capnp::Orphan< ::capnp::List< ::Asset>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Asset>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Asset>> AssetBundle::Builder::disownAssets() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Asset>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::uint32_t GUID::Reader::getV0() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t GUID::Builder::getV0() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void GUID::Builder::setV0( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t GUID::Reader::getV4() const {
  return _reader.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint32_t GUID::Builder::getV4() {
  return _builder.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void GUID::Builder::setV4( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t GUID::Reader::getV8() const {
  return _reader.getDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint32_t GUID::Builder::getV8() {
  return _builder.getDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void GUID::Builder::setV8( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t GUID::Reader::getV12() const {
  return _reader.getDataField< ::uint32_t>(
      3 * ::capnp::ELEMENTS);
}

inline  ::uint32_t GUID::Builder::getV12() {
  return _builder.getDataField< ::uint32_t>(
      3 * ::capnp::ELEMENTS);
}
inline void GUID::Builder::setV12( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      3 * ::capnp::ELEMENTS, value);
}

inline bool GUIDHashTable::Reader::hasDir() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool GUIDHashTable::Builder::hasDir() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::GUIDHashTable::Entry>::Reader GUIDHashTable::Reader::getDir() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::GUIDHashTable::Entry>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::GUIDHashTable::Entry>::Builder GUIDHashTable::Builder::getDir() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::GUIDHashTable::Entry>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void GUIDHashTable::Builder::setDir( ::capnp::List< ::GUIDHashTable::Entry>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::GUIDHashTable::Entry>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::GUIDHashTable::Entry>::Builder GUIDHashTable::Builder::initDir(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::GUIDHashTable::Entry>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void GUIDHashTable::Builder::adoptDir(
    ::capnp::Orphan< ::capnp::List< ::GUIDHashTable::Entry>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::GUIDHashTable::Entry>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::GUIDHashTable::Entry>> GUIDHashTable::Builder::disownDir() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::GUIDHashTable::Entry>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool GUIDHashTable::Entry::Reader::hasKey() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool GUIDHashTable::Entry::Builder::hasKey() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::GUID::Reader GUIDHashTable::Entry::Reader::getKey() const {
  return ::capnp::_::PointerHelpers< ::GUID>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::GUID::Builder GUIDHashTable::Entry::Builder::getKey() {
  return ::capnp::_::PointerHelpers< ::GUID>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::GUID::Pipeline GUIDHashTable::Entry::Pipeline::getKey() {
  return  ::GUID::Pipeline(_typeless.getPointerField(0));
}
inline void GUIDHashTable::Entry::Builder::setKey( ::GUID::Reader value) {
  ::capnp::_::PointerHelpers< ::GUID>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::GUID::Builder GUIDHashTable::Entry::Builder::initKey() {
  return ::capnp::_::PointerHelpers< ::GUID>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void GUIDHashTable::Entry::Builder::adoptKey(
    ::capnp::Orphan< ::GUID>&& value) {
  ::capnp::_::PointerHelpers< ::GUID>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::GUID> GUIDHashTable::Entry::Builder::disownKey() {
  return ::capnp::_::PointerHelpers< ::GUID>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint64_t GUIDHashTable::Entry::Reader::getSize() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t GUIDHashTable::Entry::Builder::getSize() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void GUIDHashTable::Entry::Builder::setSize( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t GUIDHashTable::Entry::Reader::getOffset() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t GUIDHashTable::Entry::Builder::getOffset() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void GUIDHashTable::Entry::Builder::setOffset( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}


#endif  // CAPNP_INCLUDED_b6ac9e37128f3f5f_
